
apk 加固方案：

1、代码的虚拟化：主要思路是自建一个虚拟执行引擎，让后把原生可执行代码转换成自定义指令进行虚拟执行。

2、加密：样本的部分可执行代码以压缩或加密的形式存在的。比如被保护的代码被切割成多个小段，前一段代码

先把后一段代码片段在内存中解密，让后再去执行解密后的代码，如此一块一块的去执行。  ---代表 微信 加固方式

这种加密方式非常高明：只把重要的代码块加密，而且程序执行到关键代码时候才加载如内存，解密，可以提高执行效率。


自己想实现一个加固方案：

储备知识

流程思路：

1、apk 解压--》 dex文件 + 其他文件

2、创建一个dex2 壳 + 加密的dex文件  合并一个新的dex文件

3、重新对apk整体重新签名，生成一个加固后的apk


涉及的问题：

1：dex文件可以随意的合并吗？
2：dex壳 怎么创建
3：如何进行apk签名
4：如何运行新的apk，就是脱壳流程

基本原理：

dex文件的构造
apk打包流程
dex文件加载流程

dex文件的构造：文件头--》文件大小、签名信信息等

文件体 --》》

apk打包流程：
1、相关的xml 文件 --aapt工具 --生成R.java 文件

2、aidl 文件 ---aidl工具 ----xxx.java 文件

3、把项目中所有的java文件通过 java编译器生成  .class 文件

4、项目中的class 文件 ---dex工具  生成 .dex 文件  包括 so文件/lib jar文件

5、项目中 的 dex文件  + res文件 --apkbuilder 工具 --》生成apk

6、 apk文件 签名 + 签名文件  签名的工具 生成一个签名的apk


如何运行新的apk，就是脱壳流程

解密的时间点在：运行apk时候  application 中进行dex的解密

加载dex文件



加密算法储备：

对称加密算法

DES  AES
A 和 B 用的是同一个密钥 ，有安全隐患。

非对称加密算法

A 和 B  的加密密钥跟解密密钥 不同

公钥 跟 私钥











