
======》阻塞队列跟线程池原理

BlockingQueue

阻塞队列：解决的是生成者与消费者模式的问题

有界跟无界阻塞队列： 有界就是初始化会给一个固定的大小值，反之，会给初始大小值

常用的阻塞队列：

ArrayBlockingQueue 数组结构的有界阻塞队列

LinkedBlockingQueue 链表结构的有界阻塞队列

LinkedTransferQueue 链表结构的无界阻塞队列

LinkedBlockingDeQue 链表结构组成双向阻塞队列

=======》线程池

public ThreadPoolExecutor(
        int corePoolSize,
        int maximumPoolSize,
        long keepAliveTime,
        TimeUnit unit,
        BlockingQueue<Runnable> workQueue,
        ThreadFactory threadFactory,
        RejectedExecutionHandler handler) {

    }
参数的含义：
corePoolSize == 线程池核心线程数
maximumPoolSize == 线程池最大线程数
keepAliveTime + TimeUnit == 线程池中线程存活的时间
workQueue == 线程池中的阻塞队列，存放阻塞的线程任务
handler == 线程池的拒绝策略 ----》假如 线程池中的线程数+ 阻塞队列中的任务数 < 还有任务过来，执行拒绝策略

使用线程的的好处：
降低资源消耗。通过复用已存在的线程和降低线程关闭的次数来尽可能降低系统性能损耗；
提升系统响应速度。通过复用线程，省去创建线程的过程，因此整体上提升了系统的响应速度；
提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，因此，需要使用线程池来管理线程。

======》线程池的工作机制 ：

1）如果当前运行的线程少于corePoolSize，则创建新线程来执行任务（注意，执行这一步骤需要获取全局锁）。
2）如果运行的线程等于或多于corePoolSize，则将任务加入BlockingQueue。
3）如果无法将任务加入BlockingQueue（队列已满），则创建新的线程来处理任务。
4）如果创建新线程将使当前运行的线程超出maximumPoolSize，任务将被拒绝，并调用RejectedExecutionHandler.rejectedExecution()方法。

handler：饱和策略，采用的策略有这几种：
AbortPolicy： 直接拒绝所提交的任务，并抛出RejectedExecutionException异常；
CallerRunsPolicy：只用调用者所在的线程来执行任务；
DiscardPolicy：不处理直接丢弃掉任务；
DiscardOldestPolicy：丢弃掉阻塞队列中存放时间最久的任务，执行当前任务

=======》配置线程池

可以通过Runtime.getRuntime().availableProcessors()方法获得当前设备的 CPU 个数。

（1） cup密集型   最大线程数是 cpu +1

（2）io 密集型   最大线程数是 cpu * 2


面试题理解：
=====volatile和synchronize有什么区别？（B站 小米 京东）

volatile是最轻量的同步机制。
volatile保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。
但是volatile不能保证操作的原子性，因此多线程下的写复合操作会导致线程安全问题。
可以抑制重排序

synchronized可以修饰方法或者以同步块的形式来进行使用，它主要确保多个线程在同一个时刻，
只能有一个线程处于方法或者同步块中，它保证了线程对变量访问的可见性和排他性，又称为内置锁机制。

1、synchronized修饰普通方法和静态方法的区别？什么是可见性?
（1）两者根本的区别是 对象锁跟类锁的区别
     对象锁==锁住是某个具体实例对象，类锁==锁住xx.class 对象
（2）可见性：一个线程修改了某个变量的值，其他线程能立刻看到修改后的变量值

2、锁分哪几类？
（1）线程是否锁住同步资源 == 分 悲观锁跟乐观锁
（2）多个线程竞争锁时是否排队 == 分公平锁与非公平锁
（3）一个线程是否重复那锁，进入递归逻辑  = 分可重入锁 跟非可重入锁
（4）多个线程能不能公用一把锁 == 共享锁 跟 排它锁
（5）===synchronized 属于 排它锁

3、CAS无锁编程的原理。
（1）利用现代CPU 的 CAS指令
（2）CAS的基本思路就是，如果这个地址上的值和期望的值相等，则给其赋予新值，否则不做任何事儿，但是要返回原值是多少。
     循环CAS就是在一个循环里不断的做cas操作，直到成功为止。
（3）CAS 引发的三个问题：
    （1）ABA问题 == 因为CAS需要在操作值的时候，检查值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，
        又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。
     解决方案：ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加1，那么A→B→A就会变成1A→2B→3A。

    （2）性能消耗问题 == 自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。
    （3）只能修改一个变量，修改多个变量修改起来比较麻烦

4、ReentrantLock的实现原理。
（1）可重入锁的实现原理 == 锁的内部维护一个累加变量，拿一次锁变量+1，释放一次锁变量-1，知道变量 = 0 ，说明锁已经全部释放。
（2）内部使用了jdk并发框架 AQS来实现的。

5、AQS原理 （小米 京东）

（1）有一个关键的成员变量 volatile int state 用于判断锁的状态
（2）内部是采用模版方法模式封装，告诉同步工具类实现者重写的方法
（3）内部实现CLH队列锁机制
==》每一个线程要尝试拿锁的，都打包成一个节点，一一挂到队列中去，后一个线程去检测前一个节点有没有释放锁，
如果前个节点释放锁，后一个节点就能拿到锁。



6、Synchronized的原理以及与ReentrantLock的区别。（360）
（1）使用的是monitorenter跟monitorexit 指令来实现的。
（2）monitorenter 是编译后插入到同步代码块开始的位置，monitorexit 放在代码块结束位置或者异常处
（3）每一个对象都与monitor 关联，同步时候monitor与对象的锁关联起来

区别：（1）ReentrantLock 是对象 ，Synchronized 是关键字
     （2）ReentrantLock 显示锁，Synchronized 内置锁
     （3）ReentrantLock 拿锁跟释放锁可以控制

7、Synchronized做了哪些优化 （京东）

在 重量级锁 引入了 偏向锁 跟轻量级锁 这两种状态 优化点 等技术来减少锁操作的开销

（1）级别依次递增-----无锁状态/偏向锁/轻量锁/重量锁
（2）偏向锁==总是由同一个线程获得锁，没有竞争情况，一旦有了竞争就会 膨胀成 轻量级锁
     轻量级锁 == 内部获得锁采用CAS 自旋原理，对cpu由消耗，一旦自旋太多，消耗严重就会膨胀成 重量级锁
     重量级锁 == 不实用CAS ，直接线程直接阻塞状态

8、Synchronized static与非static锁的区别和范围（小米）

9、volatile 能否保证线程安全？在DCL上的作用是什么？
（1）不能保证线程安全，在DCL 双重检查机制中，抑制cpu重排序，保证cpu指令顺序执行
（2）在 new Student()时候，步奏：1、内存分配空间 2、空间初始化 3、把空间地址给引用
（3）volatile 保证 （2）顺序执行

10、什么是守护线程？你是如何退出一个线程的？
（1）调用静态方法Thread.interrupted()来进行判断当前线程是否被中断

11、sleep 、wait、yield 的区别，wait 的线程如何唤醒它？（东方头条）
（1）yield()方法：使当前线程让出CPU占有权，不释放锁
（2）Wait通常被用于线程间交互，sleep通常被用于暂停执行，yield()方法使当前线程让出CPU占有权。
（3）wait 的线程使用notify/notifyAll()进行唤醒。

区别：sleep、yield() 都不会释放锁，wait 会释放锁。

12、线程生命周期。

13、ThreadLocal是什么？
（1）是线程本地变量，主要用于线程间的隔离，
（2）内部实现 每一个线程都有一个ThreadLocalMap 变量，每个线程独有。
（3）ThreadLocalMap  key == ThreadLocal 对象 ，value ==设置的值 ，例子：val aa =ThreadLocal<Int>()、aa.set(9)

14、线程池基本原理。

15、有三个线程T1，T2，T3，怎么确保它们按顺序执行？
===>可以用join方法实现。

2、JMM ===java memory model  java内存模型

JMM 内存模型导致的并发安全性问题：
====在java 内存模型中 内存分为：主内存：可以理解为堆内存 ，工作内存：可以理解为内存栈

涉及到两个概念：可见性 、原子性

由于工作内存是每个线程独享的一块空间，所有在要操作主内存中的 count 变量 ，需要从主内存中copy 一份到 工作线程中进行修改，
然后再更新主内存中的变量。
